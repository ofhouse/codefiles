{

	// Place your snippets for JavaScript React here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.

	// Comments
	"comments.header": {
		"prefix": "commHeader",
		"body": [
			"/**",
			" * $1",
			" *",
			" * @flow",
			" */",
			"",
			"$0"
		],
		"description": "Adds a header comment."
	},

	// Arrays
	"array.slice": {
		"prefix": "arraySlice",
		"body": [
			"[",
		  "  ...${1:array}.slice(0, ${2:index}),",
			"    {",
			"      ...${3:updatedItem}",
			"    },",
			"  ...$1.slice($2 + 1),",
			"]$0"
		],
		"description": "Update an element in an array with spread-syntax."
	},

	// React
	"react.lifecycle.componentDidMount": {
		"prefix": "componentDidMount",
		"body": [
			"componentDidMount() {",
			"  $0",
			"}"
		],
		"description": "Template for lifecycle method componentDidMount"
	},

	"react.lifecycle.componentWillUnmount": {
		"prefix": "componentWillUnmount",
		"body": [
			"componentWillUnmount() {",
			"  $0",
			"}"
		],
		"description": "Template for lifecycle method componentWillUnmount"
	},

	"react.lifecycle.componentWillReceiveProps": {
		"prefix": "componentWillReceiveProps",
		"body": [
			"componentWillReceiveProps(nextProps) {",
			"  $0",
			"}"
		],
		"description": "Template for lifecycle method componentWillReceiveProps"
	},

	"react.lifecycle.shouldComponentUpdate": {
		"prefix": "shouldComponentUpdate",
		"body": [
			"shouldComponentUpdate(nextProps, nextState) {",
			"  $0",
			"}"
		],
		"description": "Template for lifecycle method shouldComponentUpdate"
	},

	"react.lifecycle.componentWillUpdate": {
		"prefix": "componentWillUpdate",
		"body": [
			"componentWillUpdate(nextProps, nextState) {",
			"  $0",
			"}"
		],
		"description": "Template for lifecycle method componentWillUpdate"
	},

	"react.lifecycle.componentDidUpdate": {
		"prefix": "componentDidUpdate",
		"body": [
			"componentDidUpdate(prevProps, prevState) {",
			"  $0",
			"}"
		],
		"description": "Template for lifecycle method componentDidUpdate"
	},

	"react.create.component": {
		"prefix": "reactComponent",
		"body": [
			"import * as React from 'react';",
			"",
			"type Props = {",
			"  ${1:propName}",
			"};",
			"",
			"export default class ${2:ComponentName} extends React.Component<Props> {",
			"  render() {",
			"    return(<div>$0</div>);",
			"  }",
			"}"
		],
		"description": "React component template"
	},

	"react.create.component.function": {
		"prefix": "reactComponentFunct",
		"body": [
			"import * as React from 'react';",
			"",
			"type Props = {",
			"  ${1:propName}",
			"};",
			"",
			"export default function ${2:ComponentName}(props: Props) {",
			"  return(<div>$0</div>);",
			"}"
		],
		"description": "React component template (as function)"
	},

	"react.bind.this": {
		"prefix": "bindThis",
		"body": [
			"this.${1:functionName} = this.$1.bind(this);$0"
		],
		"description": "Class binding in react"
	},

	"react.constructor": {
		"prefix": "reactConstructor",
		"body": [
			"constructor(props) {",
			"  super(props);",
			"",
			"  this.state = {",
			"    $0",
			"  };",
			"}"
		],
		"description": "Adds a react component constructor"
	},

	// Redux
	"redux.connect": {
		"prefix": "reduxConnect",
		"body": [
			"import { connect } from 'react-redux';",
			"$0"
		],
		"description": "Import connect from react-redux module"
	},

	"redux.reducer": {
		"prefix": "reduxReducer",
		"body": [
			"const initialState = {};",
			"",
			"export default function reducer(state = initialState, action) {",
			"  switch (action.type) {",
			"    case ${1:ACTION_TYPE}: {",
			"      return {",
			"        ...state,",
			"      }",
			"    }",
			"  }",
			"",
			"  return state;",
			"}",
			"$0"
		],
		"description": "Creates a template for a redux reducer"
	},

	// Styled components
	"styled.import": {
		"prefix": "styledImport",
		"body": [
			"import styled from 'styled-components';",
			"$0"
		],
		"description": "Import styled components module"
	},

	"styled.div": {
		"prefix": "styledDiv",
		"body": [
			"const ${1:ComponentName} = styled.div`",
			"  $0",
			"`;"
		],
		"description": "Adds a new styled component"
	}
}